// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package expect_test

import (
	"github.com/poy/onpar/diff"
)

type mockTHelper struct {
	HelperCalled chan bool
}

func newMockTHelper() *mockTHelper {
	m := &mockTHelper{}
	m.HelperCalled = make(chan bool, 100)
	return m
}
func (m *mockTHelper) Helper() {
	m.HelperCalled <- true
}

type mockMatcher struct {
	MatchCalled chan bool
	MatchInput  struct {
		Actual chan interface{}
	}
	MatchOutput struct {
		ResultValue chan interface{}
		Err         chan error
	}
}

func newMockMatcher() *mockMatcher {
	m := &mockMatcher{}
	m.MatchCalled = make(chan bool, 100)
	m.MatchInput.Actual = make(chan interface{}, 100)
	m.MatchOutput.ResultValue = make(chan interface{}, 100)
	m.MatchOutput.Err = make(chan error, 100)
	return m
}
func (m *mockMatcher) Match(actual interface{}) (resultValue interface{}, err error) {
	m.MatchCalled <- true
	m.MatchInput.Actual <- actual
	return <-m.MatchOutput.ResultValue, <-m.MatchOutput.Err
}

type mockDiffer struct {
	UseDiffOptsCalled chan bool
	UseDiffOptsInput  struct {
		Opts chan []diff.Opt
	}
}

func newMockDiffer() *mockDiffer {
	m := &mockDiffer{}
	m.UseDiffOptsCalled = make(chan bool, 100)
	m.UseDiffOptsInput.Opts = make(chan []diff.Opt, 100)
	return m
}
func (m *mockDiffer) UseDiffOpts(opts ...diff.Opt) {
	m.UseDiffOptsCalled <- true
	m.UseDiffOptsInput.Opts <- opts
}

type mockT struct {
	FatalfCalled chan bool
	FatalfInput  struct {
		Format chan string
		Args   chan []interface{}
	}
}

func newMockT() *mockT {
	m := &mockT{}
	m.FatalfCalled = make(chan bool, 100)
	m.FatalfInput.Format = make(chan string, 100)
	m.FatalfInput.Args = make(chan []interface{}, 100)
	return m
}
func (m *mockT) Fatalf(format string, args ...interface{}) {
	m.FatalfCalled <- true
	m.FatalfInput.Format <- format
	m.FatalfInput.Args <- args
}
